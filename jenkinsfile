pipeline {
    agent any
    tools {
        jdk 'jdk17'
        nodejs 'node16'
    }
    environment {
        SCANNER_HOME = tool 'sonar-scanner'
    }
    stages {
        stage('Clean Workspace') {
            steps {
                cleanWs()
            }
        }
        stage('Checkout from Git') {
            steps {
                git branch: 'main', url: 'https://github.com/Ahmedgit7/Netflix-DevSecOps-Project.git'
            }
        }
        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('sonar-server') {
                    sh '''$SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=Netflix -Dsonar.projectKey=Netflix'''
                }
            }
        }
        stage('Quality Gate') {
            steps {
                script {
                    waitForQualityGate abortPipeline: false, credentialsId: 'Sonar-token'
                }
            }
        }
        stage('Install Dependencies') {
            steps {
                sh 'npm install'
            }
        }
        stage('OWASP FS Scan') {
            steps {
                dependencyCheck additionalArguments: '--scan ./ --disableYarnAudit --disableNodeAudit', odcInstallation: 'DP-Check'
                dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
            }
        }
        stage('TRIVY FS Scan') {
            steps {
                sh 'trivy fs . > trivyfs.txt'
            }
        }
        stage('Docker Build & Push') {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker', toolName: 'docker') {
                        sh '''
                        docker build --build-arg TMDB_V3_API_KEY=fb5ccbc7d2756bc73ad2e668c1ae157a -t netflix .
                        docker tag netflix ahmed7860/netflix:latest
                        docker push ahmed7860/netflix:latest
                        '''
                    }
                }
            }
        }
        stage('TRIVY Image Scan') {
            steps {
                sh 'trivy image ahmed7860/netflix:latest > trivyimage.txt'
            }
        }
        stage('Update Deployment YAML') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'github-creds', passwordVariable: 'GIT_PASSWORD', usernameVariable: 'GIT_USERNAME')]) {
                        sh '''
                        cd Kubernetes
                        sed -i 's#image: ahmed7860/netflix:.*#image: ahmed7860/netflix:'${BUILD_NUMBER}'#' deployment.yml
                        git config user.email "ahmedhshaikh786@example.com"
                        git config user.name "Ahmed"
                        git add deployment.yml
                        git commit -m "Update image version to ${BUILD_NUMBER}"
                        git push https://${GIT_USERNAME}:${GIT_PASSWORD}@github.com/Ahmedgit7/Netflix-DevSecOps-Project.git main
                        '''
                    }
                }
            }
        }
        stage('Deploy to Container') {
            steps {
                sh 'docker run -d -p 8081:80 ahmed7860/netflix:latest'
            }
        }
    }
}
